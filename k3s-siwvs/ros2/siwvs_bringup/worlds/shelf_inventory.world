<?xml version="1.0" ?>
<sdf version="1.6">
  <world name="shelf_inventory_world">
    <!-- Physics settings optimized for small objects -->
    <physics type="ode">
      <max_step_size>0.001</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>1000</real_time_update_rate>
    # Create 3x3 grid of weight sensors (3 rows, 3 columns)
    for row in range(1, 4):
        for col in range(1, 4):
            sensor_id = f'sensor_{row}_{col}'
            weight_sensor_nodes.append(
                Node(
                    package='siwvs_control',
                    executable='weight_sensor_node.py',
                    name=f'weight_sensor_{row}_{col}',
                    parameters=[{
                        'use_sim_time': use_sim_time,
                        'sensor_id': sensor_id,
                        'shelf_id': 'shelf_01',
                        'row': row,
                        'column': col,
                        'config_file': '/config/sensor_config.yaml'
                    }],
                    output='screen'
                )
            )
    
    # RViz
    rviz_config_path = os.path.join(siwvs_bringup_dir, 'rviz', 'siwvs.rviz')
    rviz_node = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        arguments=['-d', rviz_config_path],
        parameters=[{'use_sim_time': use_sim_time}],
        output='screen'
    )
    
    # tf_plugin for publishing transforms in Gazebo
    tf_plugin_node = Node(
        package='gazebo_tf_publisher',
        executable='gazebo_tf_publisher_node',
        name='gazebo_tf_publisher',
        parameters=[{'use_sim_time': use_sim_time}],
        output='screen'
    )
    
    # ROS Bridge server for web interface
    rosbridge_node = Node(
        package='rosbridge_server',
        executable='rosbridge_websocket',
        name='rosbridge_websocket',
        parameters=[{
            'use_sim_time': use_sim_time,
            'port': 9090
        }],
        output='screen'
    )
    
    # Create LaunchDescription
    ld = LaunchDescription()
    
    # Add all nodes and processes to launch description
    ld.add_action(robot_state_publisher_node)
    ld.add_action(joint_state_publisher_node)
    ld.add_action(gazebo_launch)
    ld.add_action(spawn_robot_node)
    
    # Add controller spawners
    event_handler = RegisterEventHandler(
        event_handler=OnProcessExit(
            target_action=spawn_robot_node,
            on_exit=[controller_spawner_node]
        )
    )
    ld.add_action(event_handler)
    
    event_handler_arm = RegisterEventHandler(
        event_handler=OnProcessExit(
            target_action=controller_spawner_node,
            on_exit=[arm_controller_spawner_node]
        )
    )
    ld.add_action(event_handler_arm)
    
    # Add weight sensor nodes
    for node in weight_sensor_nodes:
        ld.add_action(node)
    
    # Add tf plugin
    ld.add_action(tf_plugin_node)
    
    # Add RViz
    ld.add_action(rviz_node)
    
    # Add ROS Bridge
    ld.add_action(rosbridge_node)
    
    return ld
